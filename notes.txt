----JavaScript is a dynamically typed language, 
which means that data types of variables are determined by the value they hold at runtime and can change throughout the program as we assign different values to them

const score = 100

in which we are not defining score is int or string , we can also have 
const score = "100"



----typeof datatypes
1. undefined   =  undefined
2. null        =  object
3.Boolean       =   Boolean
4.Number        =   Number
5.String        =   String
6.object        =   object
7.object call   =   function
8.Array         =   object

-----Stack and Heap memory
Stack
Primitive data types and references
Size is known at compile time
Fixed memory allocated
copy is created

Heap
Objects and functions
Size is known at run time
No limit for object memory
actual references

------------Math
console.log(Math.floor(Math.random() * (max- min +1 )) + min)           //to print random value between any range



---- Arrays 

const months = ['Jan', 'March', 'April', 'June'];
months.splice(1, 0, 'Feb');
// Inserts at index 1
console.log(months);
// Expected output: Array ["Jan", "Feb", "March", "April", "June"]

months.splice(4, 1, 'May');
// Replaces 1 element at index 4
console.log(months);
// Expected output: Array ["Jan", "Feb", "March", "April", "May"]


******** Two main topics 1.Objects and 2.Events


---------------Scope of let , const , var 

---const---
The const declaration declares block-scoped local variables. The value of a constant can't be changed through reassignment using the assignment operator, but if a constant is an object, its properties can be added, updated, or removed.

---let---
The let declaration declares re-assignable, block-scoped local variables, optionally initializing each to a value.

---var----
The var statement declares function-scoped or globally-scoped variables, optionally initializing each to a value.



---------------this --------------------
The value of this in JavaScript depends on how a function is invoked (runtime binding), not how it is defined. When a regular function is invoked as a method of an object (obj.method()), this points to that object. When invoked as a standalone function (not attached to an object: func()), this typically refers to the global object (in non-strict mode) or undefined (in strict mode).

Arrow functions differ in their handling of this: they inherit this from the parent scope at the time they are defined. This behavior makes arrow functions particularly useful for callbacks and preserving context. However, arrow functions do not have their own this binding. Therefore, their this value cannot be set by bind(), apply() or call() methods, nor does it point to the current object in object methods.



----------IIFE-----------------------
An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. 

Use cases -
Avoid polluting the global namespace-
Because our application could include many functions and global variables from different source files, it's important to limit the number of global variables. If we have some initiation code that we don't need to use again, we could use the IIFE pattern. As we will not reuse the code again, using IIFE in this case is better than using a function declaration or a function expression.

Execute an async function

The module pattern